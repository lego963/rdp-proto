// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: rdp/rdp.proto

package rdpv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImaginariumClient is the client API for Imaginarium service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImaginariumClient interface {
	UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error)
	DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Imaginarium_DownloadFileClient, error)
	ListFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FilesList, error)
}

type imaginariumClient struct {
	cc grpc.ClientConnInterface
}

func NewImaginariumClient(cc grpc.ClientConnInterface) ImaginariumClient {
	return &imaginariumClient{cc}
}

func (c *imaginariumClient) UploadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (*FileResponse, error) {
	out := new(FileResponse)
	err := c.cc.Invoke(ctx, "/imaginarium.Imaginarium/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginariumClient) DownloadFile(ctx context.Context, in *FileRequest, opts ...grpc.CallOption) (Imaginarium_DownloadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &Imaginarium_ServiceDesc.Streams[0], "/imaginarium.Imaginarium/DownloadFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &imaginariumDownloadFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Imaginarium_DownloadFileClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type imaginariumDownloadFileClient struct {
	grpc.ClientStream
}

func (x *imaginariumDownloadFileClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imaginariumClient) ListFiles(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*FilesList, error) {
	out := new(FilesList)
	err := c.cc.Invoke(ctx, "/imaginarium.Imaginarium/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImaginariumServer is the server API for Imaginarium service.
// All implementations must embed UnimplementedImaginariumServer
// for forward compatibility
type ImaginariumServer interface {
	UploadFile(context.Context, *FileRequest) (*FileResponse, error)
	DownloadFile(*FileRequest, Imaginarium_DownloadFileServer) error
	ListFiles(context.Context, *Empty) (*FilesList, error)
	mustEmbedUnimplementedImaginariumServer()
}

// UnimplementedImaginariumServer must be embedded to have forward compatible implementations.
type UnimplementedImaginariumServer struct {
}

func (UnimplementedImaginariumServer) UploadFile(context.Context, *FileRequest) (*FileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedImaginariumServer) DownloadFile(*FileRequest, Imaginarium_DownloadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedImaginariumServer) ListFiles(context.Context, *Empty) (*FilesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedImaginariumServer) mustEmbedUnimplementedImaginariumServer() {}

// UnsafeImaginariumServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImaginariumServer will
// result in compilation errors.
type UnsafeImaginariumServer interface {
	mustEmbedUnimplementedImaginariumServer()
}

func RegisterImaginariumServer(s grpc.ServiceRegistrar, srv ImaginariumServer) {
	s.RegisterService(&Imaginarium_ServiceDesc, srv)
}

func _Imaginarium_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginariumServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginarium.Imaginarium/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginariumServer).UploadFile(ctx, req.(*FileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginarium_DownloadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImaginariumServer).DownloadFile(m, &imaginariumDownloadFileServer{stream})
}

type Imaginarium_DownloadFileServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type imaginariumDownloadFileServer struct {
	grpc.ServerStream
}

func (x *imaginariumDownloadFileServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Imaginarium_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginariumServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginarium.Imaginarium/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginariumServer).ListFiles(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Imaginarium_ServiceDesc is the grpc.ServiceDesc for Imaginarium service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Imaginarium_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imaginarium.Imaginarium",
	HandlerType: (*ImaginariumServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Imaginarium_UploadFile_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _Imaginarium_ListFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadFile",
			Handler:       _Imaginarium_DownloadFile_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rdp/rdp.proto",
}
